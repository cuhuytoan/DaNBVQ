// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using HNM.DataNC.ModelsStore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace HNM.DataNC.Models
{
    public partial class HanomaContext : DbContext
    {
        public HanomaContext()
        {
        }

        public HanomaContext(DbContextOptions<HanomaContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Advertising> Advertising { get; set; }
        public virtual DbSet<AdvertisingBlock> AdvertisingBlock { get; set; }
        public virtual DbSet<Article> Article { get; set; }
        public virtual DbSet<ArticleBlock> ArticleBlock { get; set; }
        public virtual DbSet<ArticleBlockArticle> ArticleBlockArticle { get; set; }
        public virtual DbSet<ArticleCategory> ArticleCategory { get; set; }
        public virtual DbSet<ArticleCategoryArticle> ArticleCategoryArticle { get; set; }
        public virtual DbSet<ArticleComment> ArticleComment { get; set; }
        public virtual DbSet<ArticleRelationArticle> ArticleRelationArticle { get; set; }
        public virtual DbSet<ArticleTop> ArticleTop { get; set; }
        public virtual DbSet<ArticleType> ArticleType { get; set; }
        public virtual DbSet<ArticleVoice> ArticleVoice { get; set; }
        public virtual DbSet<ArticleVoiceType> ArticleVoiceType { get; set; }
        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserProfiles> AspNetUserProfiles { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<CareerCategory> CareerCategory { get; set; }
        public virtual DbSet<Contact> Contact { get; set; }
        public virtual DbSet<ContactAds> ContactAds { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<DeliveryAddress> DeliveryAddress { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<DepartmentMan> DepartmentMan { get; set; }
        public virtual DbSet<District> District { get; set; }
        public virtual DbSet<Email> Email { get; set; }
        public virtual DbSet<EmailList> EmailList { get; set; }
        public virtual DbSet<EmailSubscriber> EmailSubscriber { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplate { get; set; }
        public virtual DbSet<Emailcampaign> Emailcampaign { get; set; }
        public virtual DbSet<ExchangeRate> ExchangeRate { get; set; }
        public virtual DbSet<FCMClient> FCMClient { get; set; }
        public virtual DbSet<FCMMessage> FCMMessage { get; set; }
        public virtual DbSet<FCMMessageForTokken> FCMMessageForTokken { get; set; }
        public virtual DbSet<GoldPrice> GoldPrice { get; set; }
        public virtual DbSet<GoogleIndexSetting> GoogleIndexSetting { get; set; }
        public virtual DbSet<HighLightBlock> HighLightBlock { get; set; }
        public virtual DbSet<HighLightProduct> HighLightProduct { get; set; }
        public virtual DbSet<Language> Language { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<LogAPI> LogAPI { get; set; }
        public virtual DbSet<LogEvent> LogEvent { get; set; }
        public virtual DbSet<Major> Major { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<MetaKeyword> MetaKeyword { get; set; }
        public virtual DbSet<MetaKeywordMap> MetaKeywordMap { get; set; }
        public virtual DbSet<MetaResume> MetaResume { get; set; }
        public virtual DbSet<Minor> Minor { get; set; }
        public virtual DbSet<NotifyMessage> NotifyMessage { get; set; }
        public virtual DbSet<PhoneList> PhoneList { get; set; }
        public virtual DbSet<PhoneListAdd> PhoneListAdd { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductBlock> ProductBlock { get; set; }
        public virtual DbSet<ProductBlockProduct> ProductBlockProduct { get; set; }
        public virtual DbSet<ProductBrand> ProductBrand { get; set; }
        public virtual DbSet<ProductBrandBlock> ProductBrandBlock { get; set; }
        public virtual DbSet<ProductBrandBlockProductBrand> ProductBrandBlockProductBrand { get; set; }
        public virtual DbSet<ProductBrandCategory> ProductBrandCategory { get; set; }
        public virtual DbSet<ProductBrandType> ProductBrandType { get; set; }
        public virtual DbSet<ProductCategory> ProductCategory { get; set; }
        public virtual DbSet<ProductModel> ProductModel { get; set; }
        public virtual DbSet<ProductOrder> ProductOrder { get; set; }
        public virtual DbSet<ProductOrderDetails> ProductOrderDetails { get; set; }
        public virtual DbSet<ProductOrderStatus> ProductOrderStatus { get; set; }
        public virtual DbSet<ProductPicture> ProductPicture { get; set; }
        public virtual DbSet<ProductProperty> ProductProperty { get; set; }
        public virtual DbSet<ProductPropertyCategory> ProductPropertyCategory { get; set; }
        public virtual DbSet<ProductPropertyType> ProductPropertyType { get; set; }
        public virtual DbSet<ProductRelationProduct> ProductRelationProduct { get; set; }
        public virtual DbSet<ProductRenew> ProductRenew { get; set; }
        public virtual DbSet<ProductSearchCriteria> ProductSearchCriteria { get; set; }
        public virtual DbSet<ProductTop> ProductTop { get; set; }
        public virtual DbSet<ProductType> ProductType { get; set; }
        public virtual DbSet<Province> Province { get; set; }
        public virtual DbSet<QuoteAds> QuoteAds { get; set; }
        public virtual DbSet<RecruimentPicture> RecruimentPicture { get; set; }
        public virtual DbSet<Register> Register { get; set; }
        public virtual DbSet<RegisterPicture> RegisterPicture { get; set; }
        public virtual DbSet<ReplaceChar> ReplaceChar { get; set; }
        public virtual DbSet<Resume> Resume { get; set; }
        public virtual DbSet<ResumeCategory> ResumeCategory { get; set; }
        public virtual DbSet<SMSMessage> SMSMessage { get; set; }
        public virtual DbSet<Setting> Setting { get; set; }
        public virtual DbSet<ShoppingCartDetail> ShoppingCartDetail { get; set; }
        public virtual DbSet<ShoppingCartMaster> ShoppingCartMaster { get; set; }
        public virtual DbSet<Sitemap> Sitemap { get; set; }
        public virtual DbSet<Skin> Skin { get; set; }
        public virtual DbSet<StatsProduct> StatsProduct { get; set; }
        public virtual DbSet<StatusType> StatusType { get; set; }
        public virtual DbSet<Store> Store { get; set; }
        public virtual DbSet<Subscription> Subscription { get; set; }
        public virtual DbSet<SysLog> SysLog { get; set; }
        public virtual DbSet<SystemMessage> SystemMessage { get; set; }
        public virtual DbSet<TagType> TagType { get; set; }
        public virtual DbSet<Unit> Unit { get; set; }
        public virtual DbSet<UserNotify> UserNotify { get; set; }
        public virtual DbSet<VideoCategory> VideoCategory { get; set; }
        //Custom
        public virtual DbSet<Product_Search_Result> Product_Search_Result { get; set; }
        public virtual DbSet<Resume_Search_Result> Resume_Search_Result { get; set; }
        public virtual DbSet<Product_PreProcess_ByCateId_Result> Product_PreProcess_ByCateId_Result { get; set; }
        public virtual DbSet<ProductBrand_Search_Result> ProductBrand_Search_Result { get; set; }
        public virtual DbSet<Recruitment_Search_Result> Recruitment_Search_Result { get; set; }
        public virtual DbSet<Article_Search_Result> Article_Search_Result { get; set; }
        public virtual DbSet<ProductDetailSearchResult> ProductDetailSearchResult { get; set; }
        public virtual DbSet<ProductManufacture_SearchByCategory_Result> ProductManufacture_SearchByCategory_Result { get; set; }
        public virtual DbSet<ProductModel_SearchByCategory_Result> ProductModel_SearchByCategory_Result { get; set; }
        public virtual DbSet<RecruitmentTop> RecruitmentTop { get; set; }
        public virtual DbSet<Library_Search_By_Cate_Result> Library_Search_By_Cate_Result { get; set; }
        public virtual DbSet<PatchNumber_SearchByCategory_Result> PatchNumber_SearchByCategory_Result { get; set; }
        public virtual DbSet<Accesories_Search_Result> Accesories_Search_Result { get; set; }
        public virtual DbSet<ProductBrand_Search_Brand_V2_Result> ProductBrand_Search_Brand_V2_Result { get; set; }
        public virtual DbSet<Recruitment_Search_V2_Result> Recruitment_Search_V2_Result { get; set; }
        public virtual DbSet<Materials_Search_Result> Materials_Search_Result { get; set; }
        public virtual DbSet<CV_Search_Result> CV_Search_Result { get; set; }
        public virtual DbSet<DashBoashProductBrand_Result> DashBoashProductBrand_Result { get; set; }
        public virtual DbSet<GetDashBoard_Result> GetDashBoard_Result { get; set; }
        public virtual DbSet<GetArticleHome_Result> GetArticleHome_Result { get; set; }
        public virtual DbSet<GetMenuProdCateByUser_Result> GetMenuProdCateByUser_Result { get; set; }
        public virtual DbSet<GetMenuStatusByUser_Result> GetMenuStatusByUser_Result { get; set; }
        public virtual DbSet<GetCVCategory_Result> GetCVCategory_Result { get; set; }
        public virtual DbSet<Service_Search_Result> Service_Search_Result { get; set; }
        public virtual DbSet<ProductHighLight_Search_Result> ProductHighLight_Search_Result { get; set; }
        public virtual DbSet<SpAdMostView_CHT_Result> SpAdMostView_CHT_Result { get; set; }
        public virtual DbSet<Video_Search_Mobile_Result> Video_Search_Mobile { get; set; }
        public virtual DbSet<HistoryShopingCart_Result> HistoryShopingCart_Result { get; set; }
        public virtual DbSet<TimeLinePost_Result> TimeLinePost_Result { get; set; }
        public virtual DbSet<CountHistoryShopingCart_Result> CountHistoryShopingCart_Result { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Advertising>(entity =>
            {
                entity.HasKey(e => e.Advertising_ID);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Ext).HasMaxLength(50);

                entity.Property(e => e.FormId).HasMaxLength(50);

                entity.Property(e => e.Image).HasMaxLength(50);

                entity.Property(e => e.IsCode).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.URL).HasMaxLength(1000);

                entity.HasOne(d => d.AdvertisingBlock_)
                    .WithMany(p => p.Advertising)
                    .HasForeignKey(d => d.AdvertisingBlock_ID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Advertising_AdvertisingBlock");
            });

            modelBuilder.Entity<AdvertisingBlock>(entity =>
            {
                entity.HasKey(e => e.AdvertisingBlock_ID);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.IsMobile).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.SizeSuggest).HasMaxLength(500);
            });

            modelBuilder.Entity<Article>(entity =>
            {
                entity.HasKey(e => e.Article_ID);

                entity.HasIndex(e => new { e.ArticleType_ID, e.Article_ID })
                    .HasName("NonClusteredIndex-20191023-101953");

                entity.Property(e => e.BannerImages).HasMaxLength(50);

                entity.Property(e => e.Content).HasColumnType("ntext");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Image).HasMaxLength(50);

                entity.Property(e => e.ImageDescription).HasMaxLength(200);

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.MetaDescription).HasMaxLength(500);

                entity.Property(e => e.MetaKeywords).HasMaxLength(500);

                entity.Property(e => e.MetaTitle).HasMaxLength(500);

                entity.Property(e => e.ReferralCode).HasMaxLength(50);

                entity.Property(e => e.SKU).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SubTitle).HasMaxLength(200);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.URL).HasMaxLength(1000);
            });

            modelBuilder.Entity<ArticleBlock>(entity =>
            {
                entity.HasKey(e => e.ArticleBlock_id);

                entity.Property(e => e.CreateBy).HasMaxLength(256);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Image).HasMaxLength(50);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(500);
            });

            modelBuilder.Entity<ArticleBlockArticle>(entity =>
            {
                entity.HasKey(e => e.ArticleBlockArticle_id);

                entity.HasOne(d => d.ArticleBlock_)
                    .WithMany(p => p.ArticleBlockArticle)
                    .HasForeignKey(d => d.ArticleBlock_id)
                    .HasConstraintName("FK_ArticleBlockArticle_ArticleBlock");
            });

            modelBuilder.Entity<ArticleCategory>(entity =>
            {
                entity.HasKey(e => e.ArticleCategory_ID);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Image).HasMaxLength(500);

                entity.Property(e => e.Language_ID).HasDefaultValueSql("((1))");

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");

                entity.Property(e => e.MenuIconUrl).HasMaxLength(200);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.URL).HasMaxLength(500);
            });

            modelBuilder.Entity<ArticleCategoryArticle>(entity =>
            {
                entity.HasKey(e => e.ArticleCategoryArticle_ID);
            });

            modelBuilder.Entity<ArticleComment>(entity =>
            {
                entity.HasKey(e => e.ArticleComment_ID)
                    .HasName("PK_Comment");

                entity.Property(e => e.Content).HasColumnType("ntext");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ArticleRelationArticle>(entity =>
            {
                entity.HasKey(e => e.ArticleRelationArticle_ID)
                    .HasName("PK_ArticleRelationArticle_1");
            });

            modelBuilder.Entity<ArticleTop>(entity =>
            {
                entity.HasKey(e => e.ArticleTop_ID);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ArticleType>(entity =>
            {
                entity.HasKey(e => e.ArticleType_ID);

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<ArticleVoice>(entity =>
            {
                entity.HasKey(e => e.ArticleVoice_ID)
                    .HasName("PK__ArticleV__820A46C3735FF131");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.FileName).HasMaxLength(200);

                entity.Property(e => e.FileUrl).HasMaxLength(1000);

                entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");

                entity.Property(e => e.LinkAPI).HasMaxLength(1000);
            });

            modelBuilder.Entity<ArticleVoiceType>(entity =>
            {
                entity.HasKey(e => e.ArticleVoiceType_ID)
                    .HasName("PK__ArticleV__08DB804A20A0CBA6");

                entity.Property(e => e.Rate).HasMaxLength(10);

                entity.Property(e => e.VoiceKey).HasMaxLength(100);

                entity.Property(e => e.VoiceName).HasMaxLength(200);

                entity.Property(e => e.VoiceNameCode).HasMaxLength(200);
            });

            modelBuilder.Entity<AspNetRoleClaims>(entity =>
            {
                entity.HasIndex(e => e.RoleId);

                entity.Property(e => e.RoleId)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.ConcurrencyStamp)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.NormalizedName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AspNetUserClaims>(entity =>
            {
                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey, e.UserId })
                    .HasName("PK_dbo.AspNetUserLogins");

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.ProviderKey).HasMaxLength(128);

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.ProviderDisplayName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUserProfiles>(entity =>
            {
                entity.Property(e => e.Address).HasMaxLength(250);

                entity.Property(e => e.AvatarUrl).HasMaxLength(250);

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.Company).HasMaxLength(250);

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.DirectManagement).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.FacebookID).HasMaxLength(50);

                entity.Property(e => e.FormOfLabor).HasMaxLength(500);

                entity.Property(e => e.FullName).HasMaxLength(250);

                entity.Property(e => e.Gender).HasComment("true là nam, false là nữ");

                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.ReferralAccountCode).HasMaxLength(250);

                entity.Property(e => e.RegType)
                    .HasMaxLength(50)
                    .HasComment("1 là email, 2 là sdt");

                entity.Property(e => e.RegisterDate).HasColumnType("datetime");

                entity.Property(e => e.Signature).HasMaxLength(2000);

                entity.Property(e => e.Skype).HasMaxLength(250);

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.VerifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Website).HasMaxLength(250);

                entity.Property(e => e.WorkPosition).HasMaxLength(500);
            });

            modelBuilder.Entity<AspNetUserRoles>(entity =>
            {
                entity.Property(e => e.RoleId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.AccountCode).HasMaxLength(500);

                entity.Property(e => e.ConcurrencyStamp)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(256)
                    .HasComment("Địa chỉ email của User");

                entity.Property(e => e.IsEnabled).HasDefaultValueSql("((1))");

                entity.Property(e => e.LockoutEnd).HasColumnType("datetime");

                entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");

                entity.Property(e => e.NormalizedEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NormalizedUserName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<CareerCategory>(entity =>
            {
                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Image).HasMaxLength(500);

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");

                entity.Property(e => e.MetaDescription).HasMaxLength(500);

                entity.Property(e => e.MetaKeywords).HasMaxLength(500);

                entity.Property(e => e.MetaTitle).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.URL).HasMaxLength(500);
            });

            modelBuilder.Entity<Contact>(entity =>
            {
                entity.HasKey(e => e.Contact_ID);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.Image).HasMaxLength(500);

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.Telephone).HasMaxLength(500);
            });

            modelBuilder.Entity<ContactAds>(entity =>
            {
                entity.Property(e => e.Address).HasMaxLength(250);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(11)
                    .IsFixedLength();

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasKey(e => e.Country_ID);

                entity.Property(e => e.CountryCode).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.UrlFlag).HasMaxLength(500);
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.HasKey(e => e.Customer_ID);

                entity.Property(e => e.AboutUs).HasColumnType("ntext");

                entity.Property(e => e.Address).HasMaxLength(4000);

                entity.Property(e => e.Contact).HasColumnType("ntext");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.Fax).HasMaxLength(500);

                entity.Property(e => e.Keyword).HasColumnType("ntext");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.Logo)
                    .HasMaxLength(500)
                    .HasDefaultValueSql("(N'0.jpg')");

                entity.Property(e => e.Map).HasColumnType("ntext");

                entity.Property(e => e.Name).HasMaxLength(2000);

                entity.Property(e => e.Phone).HasMaxLength(500);

                entity.Property(e => e.Skype).HasMaxLength(50);

                entity.Property(e => e.URL).HasMaxLength(1000);

                entity.Property(e => e.Website).HasMaxLength(500);

                entity.Property(e => e.YM).HasMaxLength(50);
            });

            modelBuilder.Entity<DeliveryAddress>(entity =>
            {
                entity.Property(e => e.Address).HasMaxLength(300);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.PhoneNumber).HasMaxLength(20);

                entity.Property(e => e.UserName).HasMaxLength(200);
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.HasKey(e => e.Department_ID);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.Leader).HasMaxLength(200);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.Phone).HasMaxLength(50);
            });

            modelBuilder.Entity<DepartmentMan>(entity =>
            {
                entity.HasKey(e => e.DepartmentMan_ID);

                entity.Property(e => e.Name).HasMaxLength(500);
            });

            modelBuilder.Entity<District>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Prefix).HasMaxLength(50);
            });

            modelBuilder.Entity<Email>(entity =>
            {
                entity.HasKey(e => e.Email_ID);

                entity.Property(e => e.Body).HasColumnType("ntext");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.FromName).HasMaxLength(1000);

                entity.Property(e => e.SendDate).HasColumnType("datetime");

                entity.Property(e => e.Subject).HasMaxLength(1000);

                entity.Property(e => e.ToEmail).HasMaxLength(200);

                entity.Property(e => e.ToName).HasMaxLength(1000);
            });

            modelBuilder.Entity<EmailList>(entity =>
            {
                entity.Property(e => e.Email).HasMaxLength(200);

                entity.Property(e => e.FullName).HasMaxLength(200);
            });

            modelBuilder.Entity<EmailSubscriber>(entity =>
            {
                entity.HasKey(e => e.EmailSubscriber_ID);

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(200);

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<EmailTemplate>(entity =>
            {
                entity.HasKey(e => e.EmailTemplate_ID);

                entity.Property(e => e.Body).HasColumnType("ntext");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(1000);
            });

            modelBuilder.Entity<Emailcampaign>(entity =>
            {
                entity.HasKey(e => e.CampaignId)
                    .HasName("PK__Emailcam__3F5E8A994D15D0E1");

                entity.Property(e => e.CampaignName).HasMaxLength(500);

                entity.Property(e => e.CampaignStatus).HasMaxLength(200);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TemplateUrl).HasMaxLength(1000);
            });

            modelBuilder.Entity<ExchangeRate>(entity =>
            {
                entity.HasKey(e => e.ExchangeRate_ID);

                entity.Property(e => e.Buy).HasColumnType("money");

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.Sell).HasColumnType("money");
            });

            modelBuilder.Entity<FCMClient>(entity =>
            {
                entity.HasKey(e => e.FCMClient_ID);

                entity.Property(e => e.FCMClient_ID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Device_ID).HasMaxLength(50);

                entity.Property(e => e.LastSeen).HasColumnType("datetime");

                entity.Property(e => e.OS).HasMaxLength(50);

                entity.Property(e => e.Token).HasMaxLength(500);

                entity.Property(e => e.Topic).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<FCMMessage>(entity =>
            {
                entity.HasKey(e => e.FCMMessage_ID);

                entity.Property(e => e.AuthorizationKey).HasMaxLength(50);

                entity.Property(e => e.Body).HasMaxLength(500);

                entity.Property(e => e.Content).HasColumnType("ntext");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.FormNameApp).HasMaxLength(100);

                entity.Property(e => e.Form_ID).HasMaxLength(100);

                entity.Property(e => e.FullUrl).HasMaxLength(500);

                entity.Property(e => e.FullUrlImage).HasMaxLength(500);

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.OrderCode).HasMaxLength(400);

                entity.Property(e => e.OrderId).HasMaxLength(200);

                entity.Property(e => e.Sender_ID).HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.Topic).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<FCMMessageForTokken>(entity =>
            {
                entity.HasKey(e => e.FCMMessageForTokken_ID)
                    .HasName("PK__FCMMessa__B7FCB0003A3FB1DF");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<GoldPrice>(entity =>
            {
                entity.HasKey(e => e.GoldPrice_ID);

                entity.Property(e => e.Buy).HasColumnType("money");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Sell).HasColumnType("money");
            });

            modelBuilder.Entity<GoogleIndexSetting>(entity =>
            {
                entity.Property(e => e.Accept).HasMaxLength(500);

                entity.Property(e => e.XClientData).HasMaxLength(500);
            });

            modelBuilder.Entity<HighLightBlock>(entity =>
            {
                entity.Property(e => e.CategoryName).HasMaxLength(250);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<HighLightProduct>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");

                entity.Property(e => e.ProductName).HasMaxLength(250);
            });

            modelBuilder.Entity<Language>(entity =>
            {
                entity.HasKey(e => e.Language_ID);

                entity.Property(e => e.Charset).HasMaxLength(50);

                entity.Property(e => e.Culture).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Keyword).HasMaxLength(2000);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.URL).HasMaxLength(50);

                entity.Property(e => e.WebsiteName).HasMaxLength(500);
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.HasKey(e => e.Location_ID)
                    .HasName("PK_Manufacturer");

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.PostalCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Exception)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.IpAddress).HasMaxLength(500);

                entity.Property(e => e.Level).HasMaxLength(50);

                entity.Property(e => e.Logger).HasMaxLength(250);

                entity.Property(e => e.Message).HasMaxLength(4000);

                entity.Property(e => e.Thread).HasMaxLength(250);

                entity.Property(e => e.UserId).HasMaxLength(250);

                entity.Property(e => e.UserName).HasMaxLength(250);
            });

            modelBuilder.Entity<LogAPI>(entity =>
            {
                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Method)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ResponseMillis).HasMaxLength(50);

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LogEvent>(entity =>
            {
                entity.HasKey(e => e.LogEvent_ID);

                entity.Property(e => e.LogEvent_ID).ValueGeneratedNever();

                entity.Property(e => e.Content).HasColumnType("ntext");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.EventObject).HasMaxLength(50);

                entity.Property(e => e.Message).HasColumnType("ntext");

                entity.Property(e => e.Object_ID).HasMaxLength(50);

                entity.Property(e => e.OldContent).HasColumnType("ntext");
            });

            modelBuilder.Entity<Major>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.MajorID).ValueGeneratedOnAdd();

                entity.Property(e => e.MajorName).HasMaxLength(100);
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.HasKey(e => e.Menu_ID);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");

                entity.Property(e => e.MenuIcon).HasMaxLength(250);

                entity.Property(e => e.MetaData).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.Type).HasMaxLength(250);

                entity.Property(e => e.URL).HasMaxLength(500);
            });

            modelBuilder.Entity<MetaKeyword>(entity =>
            {
                entity.HasKey(e => e.MetaKeyword_ID);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.URL).HasMaxLength(500);
            });

            modelBuilder.Entity<MetaKeywordMap>(entity =>
            {
                entity.HasKey(e => e.MetaKeywordMap_ID);
            });

            modelBuilder.Entity<MetaResume>(entity =>
            {
                entity.HasKey(e => e.MetaResume_ID)
                    .HasName("PK__MetaResu__45D6C64AB0D5EE18");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Minor>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.MinorID).ValueGeneratedOnAdd();

                entity.Property(e => e.MinorName).HasMaxLength(100);
            });

            modelBuilder.Entity<NotifyMessage>(entity =>
            {
                entity.HasKey(e => e.NotifyMessage_ID);

                entity.Property(e => e.Content).HasMaxLength(4000);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.ProductBrand_ID).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PhoneList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.PhoneNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<PhoneListAdd>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.PhoneNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasKey(e => e.Product_ID);

                entity.HasIndex(e => new { e.Product_ID, e.ProductCategory_ID, e.ProductCategoryMachine_ID, e.ProductType_ID, e.ProductBrand_ID, e.ProductModel_ID, e.ProductManufacture_ID, e.StatusType_ID })
                    .HasName("NonClusteredIndex-20191003-102121");

                entity.Property(e => e.AccessoriesManufactureName).HasMaxLength(250);

                entity.Property(e => e.AccessoriesModelName).HasMaxLength(250);

                entity.Property(e => e.AccessoriesTypeName).HasMaxLength(250);

                entity.Property(e => e.Active).HasDefaultValueSql("((0))");

                entity.Property(e => e.Alias).HasMaxLength(500);

                entity.Property(e => e.AllowComment).HasDefaultValueSql("((1))");

                entity.Property(e => e.BannerImages).HasMaxLength(50);

                entity.Property(e => e.BarCode).HasMaxLength(50);

                entity.Property(e => e.Content).HasColumnType("ntext");

                entity.Property(e => e.Counter).HasDefaultValueSql("((0))");

                entity.Property(e => e.Country_ID).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.Discount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DiscountRate).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EngineManufacture).HasMaxLength(500);

                entity.Property(e => e.EngineModel).HasMaxLength(500);

                entity.Property(e => e.Expiry).HasMaxLength(50);

                entity.Property(e => e.FullURL).HasMaxLength(500);

                entity.Property(e => e.Image).HasMaxLength(200);

                entity.Property(e => e.IsAuthor).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsBestSale).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsComming).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDiscontinue).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsOutStock).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSaleOff).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSecondHand).HasDefaultValueSql("((0))");

                entity.Property(e => e.Label).HasMaxLength(250);

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.LegalInfo).HasMaxLength(4000);

                entity.Property(e => e.MaterialManufactureName).HasMaxLength(250);

                entity.Property(e => e.MetaDescription).HasMaxLength(500);

                entity.Property(e => e.MetaKeywordIds)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MetaKeywords).HasMaxLength(2500);

                entity.Property(e => e.MetaTitle).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.PRInfo).HasMaxLength(4000);

                entity.Property(e => e.PartNumber).HasMaxLength(500);

                entity.Property(e => e.PaymentlType).HasMaxLength(500);

                entity.Property(e => e.Price)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PriceOld)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductBrand_ID).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductNotation).HasMaxLength(500);

                entity.Property(e => e.QRCodePublic).HasMaxLength(100);

                entity.Property(e => e.ReferralCode).HasMaxLength(50);

                entity.Property(e => e.RentalPeriod).HasMaxLength(500);

                entity.Property(e => e.RentalType).HasMaxLength(500);

                entity.Property(e => e.SKU).HasMaxLength(50);

                entity.Property(e => e.SaleAddress).HasMaxLength(500);

                entity.Property(e => e.SaleContactName).HasMaxLength(500);

                entity.Property(e => e.SaleEmail).HasMaxLength(500);

                entity.Property(e => e.SaleName).HasMaxLength(500);

                entity.Property(e => e.SalePhone).HasMaxLength(500);

                entity.Property(e => e.SalePhoneStore).HasMaxLength(500);

                entity.Property(e => e.SellCount).HasDefaultValueSql("((0))");

                entity.Property(e => e.SerialNumber).HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StatusMachine).HasMaxLength(500);

                entity.Property(e => e.StatusType_ID).HasDefaultValueSql("((1))");

                entity.Property(e => e.URL).HasMaxLength(500);

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.ViewCount).HasDefaultValueSql("((0))");

                entity.Property(e => e.WarrantyMonth).HasDefaultValueSql("((0))");

                entity.Property(e => e.WorkingAddress).HasMaxLength(2000);
            });

            modelBuilder.Entity<ProductBlock>(entity =>
            {
                entity.HasKey(e => e.ProductBlock_id);

                entity.Property(e => e.CreateBy).HasMaxLength(256);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Image).HasMaxLength(50);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(500);
            });

            modelBuilder.Entity<ProductBlockProduct>(entity =>
            {
                entity.HasKey(e => e.ProductBlockProduct_id);

                entity.HasOne(d => d.ProductBlock_)
                    .WithMany(p => p.ProductBlockProduct)
                    .HasForeignKey(d => d.ProductBlock_id)
                    .HasConstraintName("FK_ProductBlockProduct_ProductBlock");
            });

            modelBuilder.Entity<ProductBrand>(entity =>
            {
                entity.HasKey(e => e.ProductBrand_ID);

                entity.Property(e => e.Address).HasMaxLength(1000);

                entity.Property(e => e.Agency).HasMaxLength(4000);

                entity.Property(e => e.Banner).HasMaxLength(500);

                entity.Property(e => e.BrandName).HasMaxLength(200);

                entity.Property(e => e.BusinessArea).HasMaxLength(1000);

                entity.Property(e => e.Code).HasMaxLength(1000);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.DirectorAddress).HasMaxLength(500);

                entity.Property(e => e.DirectorBirthday).HasColumnType("datetime");

                entity.Property(e => e.DirectorEmail).HasMaxLength(200);

                entity.Property(e => e.DirectorMobile).HasMaxLength(200);

                entity.Property(e => e.DirectorName).HasMaxLength(200);

                entity.Property(e => e.DirectorPosition).HasMaxLength(200);

                entity.Property(e => e.District).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(200);

                entity.Property(e => e.Facebook).HasMaxLength(200);

                entity.Property(e => e.Fax).HasMaxLength(100);

                entity.Property(e => e.Hotline).HasMaxLength(200);

                entity.Property(e => e.Image).HasMaxLength(500);

                entity.Property(e => e.IssuedDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.Logo).HasMaxLength(500);

                entity.Property(e => e.MapCode).HasMaxLength(1000);

                entity.Property(e => e.Mobile).HasMaxLength(100);

                entity.Property(e => e.Name).HasMaxLength(1000);

                entity.Property(e => e.PRInfo).HasColumnType("ntext");

                entity.Property(e => e.PersonAddress).HasMaxLength(500);

                entity.Property(e => e.PersonEmail).HasMaxLength(100);

                entity.Property(e => e.PersonMobile).HasMaxLength(100);

                entity.Property(e => e.PersonName).HasMaxLength(200);

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.ReferralCode).HasMaxLength(50);

                entity.Property(e => e.ReferralCodeDate).HasColumnType("datetime");

                entity.Property(e => e.RegistrationNumber).HasMaxLength(50);

                entity.Property(e => e.Skype).HasMaxLength(200);

                entity.Property(e => e.TaxCode).HasMaxLength(50);

                entity.Property(e => e.Telephone).HasMaxLength(200);

                entity.Property(e => e.TradingName).HasMaxLength(1000);

                entity.Property(e => e.URL).HasMaxLength(200);

                entity.Property(e => e.ViewCount).HasDefaultValueSql("((0))");

                entity.Property(e => e.Website).HasMaxLength(100);

                entity.Property(e => e.Zalo).HasMaxLength(200);
            });

            modelBuilder.Entity<ProductBrandBlock>(entity =>
            {
                entity.HasKey(e => e.ProductBrandBlock_id);

                entity.Property(e => e.CreateBy).HasMaxLength(256);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Image).HasMaxLength(50);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(500);
            });

            modelBuilder.Entity<ProductBrandBlockProductBrand>(entity =>
            {
                entity.HasKey(e => e.ProductBrandBlockProductBrand_id);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ProductBrandCategory>(entity =>
            {
                entity.HasKey(e => e.ProductBrandCategory_ID);
            });

            modelBuilder.Entity<ProductBrandType>(entity =>
            {
                entity.HasKey(e => e.ProductBrandType_ID);

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<ProductCategory>(entity =>
            {
                entity.HasKey(e => e.ProductCategory_ID)
                    .HasName("PK_Category");

                entity.HasIndex(e => new { e.ProductCategory_ID, e.Parent_ID })
                    .HasName("NonClusteredIndex-20190717-113259");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Icon).HasMaxLength(500);

                entity.Property(e => e.Image).HasMaxLength(500);

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");

                entity.Property(e => e.MetaDescription).HasMaxLength(500);

                entity.Property(e => e.MetaKeywords).HasMaxLength(500);

                entity.Property(e => e.MetaTitle).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.URL).HasMaxLength(500);

                entity.HasOne(d => d.Language_)
                    .WithMany(p => p.ProductCategory)
                    .HasForeignKey(d => d.Language_ID)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductCategory_Language");
            });

            modelBuilder.Entity<ProductModel>(entity =>
            {
                entity.HasKey(e => e.ProductModel_ID);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(1000);

                entity.Property(e => e.NamePart1).HasMaxLength(50);

                entity.Property(e => e.NamePart3).HasMaxLength(50);

                entity.Property(e => e.StatusType).HasComment("1: mới thêm chưa duyệt, 2: đã duyệt");

                entity.Property(e => e.URL).HasMaxLength(500);

                entity.Property(e => e.Website).HasMaxLength(100);
            });

            modelBuilder.Entity<ProductOrder>(entity =>
            {
                entity.HasKey(e => e.ProductOrder_ID);

                entity.Property(e => e.Address)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DisCount).HasColumnType("money");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.MoreInfo).HasMaxLength(4000);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Time)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.HasOne(d => d.ProductOrderStatus_)
                    .WithMany(p => p.ProductOrder)
                    .HasForeignKey(d => d.ProductOrderStatus_ID)
                    .HasConstraintName("FK_ProductOrder_ProductOrderStatus");
            });

            modelBuilder.Entity<ProductOrderDetails>(entity =>
            {
                entity.HasKey(e => e.ProductOrderDetails_ID);

                entity.Property(e => e.Price).HasColumnType("money");

                entity.HasOne(d => d.ProductOrder_)
                    .WithMany(p => p.ProductOrderDetails)
                    .HasForeignKey(d => d.ProductOrder_ID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ProductOrderDetails_ProductOrder");
            });

            modelBuilder.Entity<ProductOrderStatus>(entity =>
            {
                entity.HasKey(e => e.ProductOrderStatus_ID);

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<ProductPicture>(entity =>
            {
                entity.HasKey(e => e.ProductPicture_ID);

                entity.Property(e => e.ProductPicture_ID).ValueGeneratedNever();

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Image).HasMaxLength(200);
            });

            modelBuilder.Entity<ProductProperty>(entity =>
            {
                entity.HasKey(e => e.ProductProperty_ID);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.HasOne(d => d.ProductPropertyCategory_)
                    .WithMany(p => p.ProductProperty)
                    .HasForeignKey(d => d.ProductPropertyCategory_ID)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductProperty_ProductPropertyCategory");

                entity.HasOne(d => d.ProductPropertyType_)
                    .WithMany(p => p.ProductProperty)
                    .HasForeignKey(d => d.ProductPropertyType_ID)
                    .HasConstraintName("FK_ProductProperty_ProductPropertyType");
            });

            modelBuilder.Entity<ProductPropertyCategory>(entity =>
            {
                entity.HasKey(e => e.ProductPropertyCategory_ID);

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.HasOne(d => d.ProductCategory_)
                    .WithMany(p => p.ProductPropertyCategory)
                    .HasForeignKey(d => d.ProductCategory_ID)
                    .HasConstraintName("FK_ProductPropertyCategory_ProductCategory");
            });

            modelBuilder.Entity<ProductPropertyType>(entity =>
            {
                entity.HasKey(e => e.ProductPropertyType_ID);

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.TemplateDisplay).HasMaxLength(4000);

                entity.Property(e => e.TemplateEdit).HasMaxLength(4000);
            });

            modelBuilder.Entity<ProductRelationProduct>(entity =>
            {
                entity.HasKey(e => e.ProductRelationProduct_ID)
                    .HasName("PK_ProductRelationProduct_1");
            });

            modelBuilder.Entity<ProductRenew>(entity =>
            {
                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DateRenew).HasColumnType("datetime");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ProductSearchCriteria>(entity =>
            {
                entity.HasKey(e => e.ProductSearchCriteria_ID);

                entity.Property(e => e.Display).HasMaxLength(200);

                entity.Property(e => e.Formula).HasMaxLength(200);

                entity.HasOne(d => d.ProductProperty_)
                    .WithMany(p => p.ProductSearchCriteria)
                    .HasForeignKey(d => d.ProductProperty_ID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ProductSearchCriteria_ProductProperty");
            });

            modelBuilder.Entity<ProductTop>(entity =>
            {
                entity.HasKey(e => e.ProductTop_ID);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ProductType>(entity =>
            {
                entity.HasKey(e => e.ProductType_ID);

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<Province>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<QuoteAds>(entity =>
            {
                entity.Property(e => e.AccessPerMonth).HasMaxLength(50);

                entity.Property(e => e.AccessPerWeek).HasMaxLength(50);

                entity.Property(e => e.AmountAdsMax).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.ImageDescriptionApp).HasMaxLength(500);

                entity.Property(e => e.ImageDescriptionWeb).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.Note).HasMaxLength(100);

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.Unit).HasMaxLength(50);
            });

            modelBuilder.Entity<RecruimentPicture>(entity =>
            {
                entity.HasKey(e => e.RecruimentPicture_ID)
                    .HasName("PK__Recruime__730D78F31298319E");

                entity.Property(e => e.RecruimentPicture_ID).ValueGeneratedNever();

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Image).HasMaxLength(200);
            });

            modelBuilder.Entity<Register>(entity =>
            {
                entity.HasKey(e => e.Register_ID);

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Birthday).HasColumnType("datetime");

                entity.Property(e => e.Class).HasMaxLength(200);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Facebook).HasMaxLength(200);

                entity.Property(e => e.Hobby).HasColumnType("ntext");

                entity.Property(e => e.Image).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.School).HasMaxLength(200);

                entity.Property(e => e.Telephone).HasMaxLength(50);

                entity.Property(e => e.URL).HasMaxLength(200);

                entity.Property(e => e.Yahoo).HasMaxLength(200);
            });

            modelBuilder.Entity<RegisterPicture>(entity =>
            {
                entity.HasKey(e => e.RegisterPicture_ID);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Image).HasMaxLength(500);

                entity.Property(e => e.ImageSmall).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.HasOne(d => d.Register_)
                    .WithMany(p => p.RegisterPicture)
                    .HasForeignKey(d => d.Register_ID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_RegisterPicture_Register");
            });

            modelBuilder.Entity<ReplaceChar>(entity =>
            {
                entity.HasKey(e => e.ReplaceChar_ID);

                entity.Property(e => e.NewChar).HasMaxLength(1);

                entity.Property(e => e.OldChar).HasMaxLength(5);
            });

            modelBuilder.Entity<Resume>(entity =>
            {
                entity.HasKey(e => e.Resume_ID);

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Certificate).HasMaxLength(100);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DOB).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.ExprienceDescription).HasMaxLength(4000);

                entity.Property(e => e.FullName).HasMaxLength(200);

                entity.Property(e => e.IdentityNumber).HasMaxLength(50);

                entity.Property(e => e.Image).HasMaxLength(100);

                entity.Property(e => e.IntroInfomation).HasMaxLength(4000);

                entity.Property(e => e.JobExpect).HasMaxLength(500);

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.MetaCategory).HasMaxLength(200);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.URL).HasMaxLength(100);
            });

            modelBuilder.Entity<ResumeCategory>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Image).HasMaxLength(500);

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");

                entity.Property(e => e.MetaDescription).HasMaxLength(500);

                entity.Property(e => e.MetaKeywords).HasMaxLength(500);

                entity.Property(e => e.MetaTitle).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.ResumeCategory_ID).ValueGeneratedOnAdd();

                entity.Property(e => e.URL).HasMaxLength(500);
            });

            modelBuilder.Entity<SMSMessage>(entity =>
            {
                entity.HasKey(e => e.SMSMessage_ID);

                entity.Property(e => e.Content).HasMaxLength(4000);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.ProductBrand_ID).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.HasKey(e => e.Setting_ID)
                    .HasName("PK_setting");

                entity.Property(e => e.AdminName).HasMaxLength(500);

                entity.Property(e => e.AppStatus)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DefaultLanguage_ID).HasDefaultValueSql("((1))");

                entity.Property(e => e.DefaultSkin_ID).HasDefaultValueSql("((1))");

                entity.Property(e => e.Domain).HasMaxLength(100);

                entity.Property(e => e.EmailOrder).HasMaxLength(500);

                entity.Property(e => e.EmailSender).HasMaxLength(500);

                entity.Property(e => e.EmailSenderPassword).HasMaxLength(500);

                entity.Property(e => e.EmailSenderPort).HasMaxLength(500);

                entity.Property(e => e.EmailSenderSMTP).HasMaxLength(500);

                entity.Property(e => e.EmailSupport).HasMaxLength(500);

                entity.Property(e => e.FacebookAdmin).HasMaxLength(50);

                entity.Property(e => e.FacebookAppID).HasMaxLength(50);

                entity.Property(e => e.FacebookPageID).HasMaxLength(50);

                entity.Property(e => e.GoogleAnalytics).HasMaxLength(1000);

                entity.Property(e => e.MetaDescriptionDefault).HasMaxLength(500);

                entity.Property(e => e.MetaKeywordsDefault).HasMaxLength(500);

                entity.Property(e => e.MetaTitleDefault).HasMaxLength(500);

                entity.Property(e => e.OtherCode).HasMaxLength(1000);

                entity.Property(e => e.Telephone).HasMaxLength(500);

                entity.Property(e => e.TwitterID).HasMaxLength(50);

                entity.Property(e => e.VBeeApp_ID).HasMaxLength(200);

                entity.Property(e => e.VBeeUser_ID).HasMaxLength(50);

                entity.Property(e => e.WebsiteName).HasMaxLength(500);

                entity.HasOne(d => d.DefaultLanguage_)
                    .WithMany(p => p.SettingDefaultLanguage_)
                    .HasForeignKey(d => d.DefaultLanguage_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Setting_Language");

                entity.HasOne(d => d.DefaultSkin_)
                    .WithMany(p => p.SettingDefaultSkin_)
                    .HasForeignKey(d => d.DefaultSkin_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Setting_Language1");
            });

            modelBuilder.Entity<ShoppingCartDetail>(entity =>
            {
                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DisCount).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ShopingCartCode)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<ShoppingCartMaster>(entity =>
            {
                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 0)");
            });

            modelBuilder.Entity<Sitemap>(entity =>
            {
                entity.Property(e => e.LanguageID).HasMaxLength(10);

                entity.Property(e => e.Link).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(500);
            });

            modelBuilder.Entity<Skin>(entity =>
            {
                entity.HasKey(e => e.Skin_ID);

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<StatsProduct>(entity =>
            {
                entity.Property(e => e.ProductCreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ProductCreatedOnString).HasMaxLength(250);
            });

            modelBuilder.Entity<StatusType>(entity =>
            {
                entity.HasKey(e => e.StatusType_ID);

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<Store>(entity =>
            {
                entity.HasKey(e => e.Store_ID)
                    .HasName("PK_Business");

                entity.Property(e => e.AboutUs).HasColumnType("ntext");

                entity.Property(e => e.Ad_left).HasColumnType("ntext");

                entity.Property(e => e.Ad_top).HasColumnType("ntext");

                entity.Property(e => e.Address).HasMaxLength(4000);

                entity.Property(e => e.Banner)
                    .HasMaxLength(500)
                    .HasDefaultValueSql("(N'0.jpg')");

                entity.Property(e => e.BannerExt).HasMaxLength(50);

                entity.Property(e => e.Contact).HasColumnType("ntext");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Domain).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Fax).HasMaxLength(500);

                entity.Property(e => e.Keyword).HasColumnType("ntext");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.Logo)
                    .HasMaxLength(500)
                    .HasDefaultValueSql("(N'0.jpg')");

                entity.Property(e => e.Map).HasColumnType("ntext");

                entity.Property(e => e.Name).HasMaxLength(2000);

                entity.Property(e => e.PageBackground).HasMaxLength(200);

                entity.Property(e => e.Phone).HasMaxLength(500);

                entity.Property(e => e.Skype).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SubDomain).HasMaxLength(50);

                entity.Property(e => e.SupportBuy).HasColumnType("ntext");

                entity.Property(e => e.URL).HasMaxLength(1000);

                entity.Property(e => e.Website).HasMaxLength(500);

                entity.Property(e => e.YM).HasMaxLength(50);

                entity.Property(e => e.YM2).HasMaxLength(50);
            });

            modelBuilder.Entity<Subscription>(entity =>
            {
                entity.HasKey(e => e.Subscription_ID)
                    .HasName("PK__Subscrip__518059B1E37F04E8");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(500);
            });

            modelBuilder.Entity<SysLog>(entity =>
            {
                entity.HasKey(e => e.SysLog_ID);

                entity.Property(e => e.SysLog_ID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Content).HasMaxLength(2000);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.ProductBrandName).HasMaxLength(500);

                entity.Property(e => e.ProductName).HasMaxLength(500);

                entity.Property(e => e.QRCodePublicContent).HasMaxLength(100);

                entity.Property(e => e.QRCodeSecretContent).HasMaxLength(100);

                entity.Property(e => e.SerialNumber).HasMaxLength(50);

                entity.Property(e => e.StoreAddress).HasMaxLength(500);

                entity.Property(e => e.StoreName).HasMaxLength(500);

                entity.Property(e => e.UsedAddress).HasMaxLength(500);

                entity.Property(e => e.UsedApplication).HasMaxLength(50);

                entity.Property(e => e.UsedDate).HasColumnType("datetime");

                entity.Property(e => e.UsedIdentityCard).HasMaxLength(50);

                entity.Property(e => e.UsedLocation).HasMaxLength(500);

                entity.Property(e => e.UsedName).HasMaxLength(500);

                entity.Property(e => e.UsedPhone).HasMaxLength(50);
            });

            modelBuilder.Entity<SystemMessage>(entity =>
            {
                entity.Property(e => e.Code).HasMaxLength(10);

                entity.Property(e => e.Message).HasMaxLength(500);
            });

            modelBuilder.Entity<TagType>(entity =>
            {
                entity.HasKey(e => e.TagType_ID);
            });

            modelBuilder.Entity<Unit>(entity =>
            {
                entity.Property(e => e.Name).HasMaxLength(500);
            });

            modelBuilder.Entity<UserNotify>(entity =>
            {
                entity.HasKey(e => e.UserNotify_ID);

                entity.Property(e => e.UserNotify_ID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Content).HasMaxLength(2000);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Subject).HasMaxLength(1000);

                entity.Property(e => e.URL).HasMaxLength(500);
            });

            modelBuilder.Entity<VideoCategory>(entity =>
            {
                entity.HasKey(e => e.VideoCategory_ID);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Image).HasMaxLength(500);

                entity.Property(e => e.LastEditedDate).HasColumnType("datetime");

                entity.Property(e => e.MenuIconUrl).HasMaxLength(100);

                entity.Property(e => e.MetaDescription).HasMaxLength(500);

                entity.Property(e => e.MetaKeywords).HasMaxLength(500);

                entity.Property(e => e.MetaTitle).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.URL).HasMaxLength(500);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}